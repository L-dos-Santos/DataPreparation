'source_name',
'source_website')] <- list(NULL)
head(vaccination)
#checking for duplicated values
duplicated(vaccination)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
#transforming character to Date
vaccination$date <- as.Date(vaccination$date)
#min-max normalization
normalizeMinMax <- function (x) {
res <- (x - min(x)) / (max(x) - min(x))
return(res)
}
vaccination_minmax <- as.data.frame(sapply(vaccination[,3:8], normalizeMinMax))
summary(vaccination_minmax)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
# Creating a z score standardization data frame
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
#creating avg variables for total of vaccines
#and avg for people vaccinated per country
by_country <- vaccination %>% group_by(country) %>% summarise(
avg_total_vaccinations = mean(total_vaccinations),
avg_people_vaccinated = mean(people_vaccinated)
)
by_country
#filtering the countries where the avarage of total vaccinations and people vaccinated
#are <5000
filtered_country <- filter(by_country,
avg_total_vaccinations <5000 & avg_people_vaccinated < 5000)
print(filtered_country)
#box plot to identify outliers
boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
main = "Box Plot with Outliers",
names = c("Avarage of Total Vaccinations",
"Avarage of People Vaccinated"))
#selecting the top 5 countries
top_countries <- vaccination %>%
arrange(desc(total_vaccinations)) %>%
distinct(country, .keep_all = TRUE) %>%
head(5)
# Print the result
print(top_countries)
#plot with top 5 countries
ggplot(top_countries, aes(x = reorder(country, -total_vaccinations), y = total_vaccinations)) +
geom_bar(stat = "identity", fill = "orange", color = "black") +
labs(title = "Top 5 Countries with Highest Total Vaccinations",
x = "Country",
y = "Total Vaccinations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
# robust scalar
# Define the robust_scalar function
robust_scalar <- function(x) {
median(x) / (quantile(x, probs = 0.75) - quantile(x, probs = 0.25))
}
# Apply the function to relevant variables
vaccination_robust <- vaccination %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
#plot with top 5 countries
ggplot(top_countries, aes(x = reorder(country, -total_vaccinations), y = total_vaccinations)) +
geom_bar(stat = "identity", fill = "orange", color = "black") +
labs(title = "Top 5 Countries with Highest Total Vaccinations",
x = "Country",
y = "Total Vaccinations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
# robust scalar
# Define the robust_scalar function
robust_scalar <- function(x) {
median(x) / (quantile(x, probs = 0.75) - quantile(x, probs = 0.25))
}
# Apply the function to relevant variables
vaccination_robust <- vaccination %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
# Boxplot of the result
boxplot(vaccination_robust)
head(robust_scalar)
summarise_all(robust_scalar)
# robust scalar
# Define the robust_scalar function
robust_scalar <- function(x) {
median(x) / (quantile(x, probs = 0.75) - quantile(x, probs = 0.25))
}
# Apply the function to relevant variables
vaccination_robust <- vaccination %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
head(robust_scalar)
ggplot(vaccination_robust,
aes(x = daily_vaccinations,
y = total_vaccinations)) +
geom_point()
ggplot(vaccination_robust,
aes(x = daily_vaccinations)) +
geom_point()
# Create a scatter plot using ggplot2
ggplot(vaccination_robust %>% gather(key = "Variable", value = "Robust_Scalar"), aes(x = Variable, y = Robust_Scalar)) +
geom_point() +
labs(title = "Robust Scalar for Vaccination Variables",
x = "Vaccination Variable",
y = "Robust Scalar") +
theme_minimal() +
coord_flip()  # Rotate x-axis labels for better readability
ggplot(vaccination_robust %>%
gather(key = "Variable", value = "Robust_Scalar"),
aes(x = Variable, y = Robust_Scalar, fill = Variable)) +
geom_boxplot() +
labs(title = "Robust Scalar for Vaccination Variables",
x = "Vaccination Variable",
y = "Robust Scalar") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels
scale_fill_manual(values = c("daily_vaccinations" = "blue",
"total_vaccinations" = "green",
"people_vaccinated" = "orange",
"people_fully_vaccinated" = "red"))  # Adjust colors
# Define the robust_scalar function
robust_scalar <- function(x) {
median(x) / IQR(x)
}
# Apply the function to relevant variables
vaccination_robust <- vaccination %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
View(robust_scalar)
# Boxplot of the result
boxplot(vaccination_robust)
ggplot(vaccination_robust %>%
gather(key = "Variable", value = "Robust_Scalar"),
aes(x = Variable, y = Robust_Scalar, fill = Variable)) +
geom_bar() +
labs(title = "Robust Scalar for Vaccination Variables",
x = "Vaccination Variable",
y = "Robust Scalar") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels
scale_fill_manual(values = c("daily_vaccinations" = "blue",
"total_vaccinations" = "green",
"people_vaccinated" = "orange",
"people_fully_vaccinated" = "red"))  # Adjust colors
ggplot(vaccination_robust %>%
gather(key = "Variable", value = "Robust_Scalar"),
aes(x = Variable, y = Robust_Scalar, fill = Variable)) +
geom_boxplot() +
labs(title = "Robust Scalar for Vaccination Variables",
x = "Vaccination Variable",
y = "Robust Scalar") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels
scale_fill_manual(values = c("daily_vaccinations" = "blue",
"total_vaccinations" = "green",
"people_vaccinated" = "orange",
"people_fully_vaccinated" = "red"))  # Adjust colors
ggplot(vaccination_robust %>%
gather(key = "Variable", value = "Robust_Scalar"),
aes(x = Variable, y = Robust_Scalar, color = Variable)) +
geom_point() +
geom_line(aes(group = Variable), linetype = "dashed") +
labs(title = "Robust Scalar for Vaccination Variables",
x = "Vaccination Variable",
y = "Robust Scalar") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
ggplot(vaccination_robust %>%
gather(key = "Variable", value = "Robust_Scalar"),
aes(x = Variable, y = Robust_Scalar, fill = Variable)) +
geom_violin() +
labs(title = "Robust Scalar for Vaccination Variables",
x = "Vaccination Variable",
y = "Robust Scalar") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
ggplot(vaccination_robust %>%
gather(key = "Variable", value = "Robust_Scalar"),
aes(x = Variable, y = Robust_Scalar, fill = Variable)) +
geom_bar(stat = "identity") +
labs(title = "Robust Scalar for Vaccination Variables",
x = "Vaccination Variable",
y = "Robust Scalar") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
plot(vaccination_robust)
plot(vaccination)
#creating avg variables for total of vaccines
#and avg for people vaccinated per country
by_country <- vaccination %>% group_by(country) %>% summarise(
avg_total_vaccinations = mean(total_vaccinations),
avg_people_vaccinated = mean(people_vaccinated)
)
by_country
#filtering the countries where the avarage of total vaccinations and people vaccinated
#are <5000
filtered_country <- filter(by_country,
avg_total_vaccinations <5000 & avg_people_vaccinated < 5000)
print(filtered_country)
#box plot to identify outliers
boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
main = "Box Plot with Outliers",
names = c("Avarage of Total Vaccinations",
"Avarage of People Vaccinated"))
library(olsrr)
vac <- lm(avg_total_vaccination ~ avg_people_vaccinated, data = filtered_country)
vac <- lm(avg_total_vaccinations ~ avg_people_vaccinated, data = filtered_country)
ols_plot_resid_lev(vac)
# robust scalar
# Define the robust_scalar function
robust_scalar <- function(x) {
median(x) / (quantile(x, probs = 0.75) - quantile(x, probs = 0.25))
}
# Define the robust_scalar function
robust_scalar <- function(x) {
median(x) / IQR(x)
}
# Apply the function to relevant variables
vaccination_robust <- filtered_country %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
# Apply the function to relevant variables
vaccination_robust <- filtered_country %>%
select(avg_total_vaccinations, avg_people_vaccinated) %>%
summarise_all(robust_scalar)
# Boxplot of the result
boxplot(vaccination_robust)
by_country
# Boxplot of the result
boxplot(vaccination_robust)
print(robust_scalar)
# Boxplot of the result
boxplot(vaccination_robust)
robust_scalar <- function(x) {
median(x) / (quantile(x, probs = 0.75) - quantile(x, probs = 0.25))
}
# Define the robust_scalar function
robust_scalar <- function(x) {
median(x) / IQR(x)
}
# Apply the function to relevant variables
vaccination_robust <- vaccination %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
# Boxplot of the result
boxplot(vaccination_robust)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
View(vaccination)
robustScalar <- filter(vaccination,
total_vaccinations <5000,
people_vaccinated <5000)
print(robustScalar)
robustScalar <- filter(vaccination,
total_vaccinations <5000 &
people_vaccinated <5000)
print(robustScalar)
robustScalar <- filter(vaccination,
total_vaccinations <1000,
people_vaccinated <1000)
print(robustScalar)
robustScalar <- filter(vaccination,
0 < total_vaccinations <1000,
robustScalar <- filter(vaccination,
total_vaccinations <1000,
people_vaccinated <1000,
people_fully_vaccinated <1000
)
print(robustScalar)
robustScalar <- filter(vaccination,
total_vaccinations <1000 & total_vaccinatios >0,
people_vaccinated <1000,
people_fully_vaccinated <1000,
dailly_vaccinations <1000)
"Avarage of People Vaccinated"))
robustScalar <- filter(vaccination,
total_vaccinations <1000 & total_vaccinatiosn >0,
people_vaccinated <1000,
people_fully_vaccinated <1000,
dailly_vaccinations <1000)
robustScalar <- filter(vaccination,
total_vaccinations <1000 & total_vaccinations >0,
people_vaccinated <1000,
people_fully_vaccinated <1000,
dailly_vaccinations <1000)
robustScalar <- filter(vaccination,
total_vaccinations <1000 & total_vaccinations >0,
people_vaccinated <1000,
people_fully_vaccinated <1000,
daily_vaccinations <1000)
print(robustScalar)
robustScalar <- filter(vaccination,
total_vaccinations <1000 & total_vaccinations >0,
people_vaccinated <1000 & people_vaccinated >0,
people_fully_vaccinated <1000 & people_fully_vaccinated >0,
daily_vaccinations <1000 & daily_vaccinations >0)
print(robustScalar)
robust_scalar <- function(x) {
median(x) / (quantile(x, probs = 0.75) - quantile(x, probs = 0.25))
}
vaccination_robust <- range_data %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
robustScalar
range_data <- as.data.frame(range_data)
range_data <- filter(vaccination,
total_vaccinations <1000 & total_vaccinations >0,
people_vaccinated <1000 & people_vaccinated >0,
people_fully_vaccinated <1000 & people_fully_vaccinated >0,
daily_vaccinations <1000 & daily_vaccinations >0)
print(robustScalar)
range_data <- as.data.frame(range_data)
range_data
robust_scalar <- function(x) {
median(x) / (quantile(x, probs = 0.75) - quantile(x, probs = 0.25))
}
# Apply the function to relevant variables
vaccination_robust <- range_data %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
# Boxplot of the result
boxplot(vaccination_robust)
robustScalar<- function(x){(x-median(x)) /(quantile(x,probs =
0.75) - quantile(x,probs = 0.25))}
vaccination_r <- robustScalar(vaccination$daily_vaccinations)
boxplot(vaccination_r)
vaccination_r <- robustScalar(vaccination$total_vaccinations)
boxplot(vaccination_r)
setwd("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Tutorial_3")
library(ggplot2)
library(gridExtra)
# Create subset of "cars"
cars <- read.csv(file = "cars.txt", stringsAsFactors = FALSE)
# Create subset of "cars"
cars <- read.csv(file = "cars.txt", stringsAsFactors = FALSE)
head(cars)
mydata<-cars
View(mydata)
ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point()
normalizeMM <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
mpg_norm<-normalizeMM(mydata$mpg)
weightlbs_norm<-normalizeMM(mydata$weightlbs)
ggplot(mydata, aes(x = mpg_norm, y = weightlbs_norm)) + geom_point()
# Plot two graphs together
# Original Data Plot
p1 <- ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point() + labs(title = "Original Data")
# Normalized Data Plot
p2 <- ggplot(mydata, aes(x = mpg_norm, y = weightlbs_norm)) + geom_point() + labs(title = "Minmax Normalized Data")
# Arrange both plots side by side
grid.arrange(p1, p2, ncol = 2)
mydata<-cars
ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point()
mpg_zscaled<-scale(mydata$mpg)
weightlbs_zscaled<-scale(mydata$weightlbs)
ggplot(mydata, aes(x = mpg_zscaled, y = weightlbs_zscaled)) + geom_point()
p3 = ggplot(mydata, aes(x = mpg_zscaled, y = weightlbs_zscaled)) + geom_point() + labs(title = "Scaled Data")
# Arrange both plots side by side
grid.arrange(p1, p2, p3, ncol = 3)
library(gridExtra)
# Normalize the data using the Robust Scaler
mpg_robust <- (mydata$mpg - median(mydata$mpg)) / mad(mydata$mpg)
weightlbs_robust <- (mydata$weightlbs - median(mydata$weightlbs)) / mad(mydata$weightlbs)
# Original Data Plot
p1 <- ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point() +  labs(title = "Original Data")
# Normalized Data Plot
p2 <- ggplot(mydata, aes(x = mpg_norm, y = weightlbs_norm)) + geom_point(color = "blue") + labs(title = "Min Max Normalized Data")
# Normalized Data Plot
p3 <- ggplot(mydata, aes(x = mpg_zscaled, y = weightlbs_zscaled)) + geom_point(color = "red") + labs(title = "Normalized Data")
# Robust Scaled Data Plot
p4 <- ggplot(mydata, aes(x = mpg_robust, y = weightlbs_robust)) + geom_point(color = "yellow") + labs(title = "Robust Scaled Data")
# Decimal Scaled Data Plot
p5 <- ggplot(mydata, aes(x = mpg_dscale, y = weightlbs_dscale)) + geom_point(color = "orange") + labs(title = "Decimal Scaled Data")
# log Scaled Data Plot
p6 <- ggplot(mydata, aes(x = mpg_logscale, y = weightlbs_logscale)) + geom_point(color = "pink") + labs(title = "Natural Log Scaled Data")
# sqrt Scaled Data Plot
p7 <- ggplot(mydata, aes(x = mpg_sqrtscale, y = weightlbs_sqrtscale)) + geom_point(color = "green") + labs(title = "sqrt Scaled Data")
# Inv-sqrt Scaled Data Plot
p8 <- ggplot(mydata, aes(x = mpg_invsqrtscale, y = weightlbs_invsqrtscale)) + geom_point(color = "light blue") + labs(title = "Inverse sqrt Scaled Data")
# Arrange both plots side by side
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2, nrow = 4)
# Normalize the data using the Robust Scaler
mpg_robust <- (mydata$mpg - median(mydata$mpg)) / mad(mydata$mpg)
weightlbs_robust <- (mydata$weightlbs - median(mydata$weightlbs)) / mad(mydata$weightlbs)
# Decimal Scaling
# Function to perform decimal scaling
decimal_scale <- function(x) {
max_value <- max(abs(x))
scale_factor <- 10^ceiling(log10(max_value))
scaled_values <- x / scale_factor
return(scaled_values)
}
# Apply decimal scaling to the 'Value' column
mpg_dscale <- decimal_scale(mydata$mpg)
weightlbs_dscale <- decimal_scale(mydata$weightlbs)
# Function to perform natural log scaling
log_scale <- function(x) {
return(log(x))
}
mpg_logscale <- log_scale(mydata$mpg)
weightlbs_logscale <- log_scale(mydata$weightlbs)
# Function to perform square root scaling
sqrt_scale <- function(x) {
return(sqrt(x))
}
mpg_sqrtscale <- sqrt_scale(mydata$mpg)
weightlbs_sqrtscale <- sqrt_scale(mydata$weightlbs)
# Function to perform inverse square root scaling
inv_sqrt_scale <- function(x) {
return(1 / sqrt(x))
}
# Apply scaling functions to the 'Value' column
mpg_invsqrtscale <- inv_sqrt_scale(mydata$mpg)
weightlbs_invsqrtscale <- inv_sqrt_scale(mydata$weightlbs)
# Original Data Plot
p1 <- ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point() +  labs(title = "Original Data")
# Normalized Data Plot
p2 <- ggplot(mydata, aes(x = mpg_norm, y = weightlbs_norm)) + geom_point(color = "blue") + labs(title = "Min Max Normalized Data")
# Normalized Data Plot
p3 <- ggplot(mydata, aes(x = mpg_zscaled, y = weightlbs_zscaled)) + geom_point(color = "red") + labs(title = "Normalized Data")
# Robust Scaled Data Plot
p4 <- ggplot(mydata, aes(x = mpg_robust, y = weightlbs_robust)) + geom_point(color = "yellow") + labs(title = "Robust Scaled Data")
# Decimal Scaled Data Plot
p5 <- ggplot(mydata, aes(x = mpg_dscale, y = weightlbs_dscale)) + geom_point(color = "orange") + labs(title = "Decimal Scaled Data")
# log Scaled Data Plot
p6 <- ggplot(mydata, aes(x = mpg_logscale, y = weightlbs_logscale)) + geom_point(color = "pink") + labs(title = "Natural Log Scaled Data")
# sqrt Scaled Data Plot
p7 <- ggplot(mydata, aes(x = mpg_sqrtscale, y = weightlbs_sqrtscale)) + geom_point(color = "green") + labs(title = "sqrt Scaled Data")
# Inv-sqrt Scaled Data Plot
p8 <- ggplot(mydata, aes(x = mpg_invsqrtscale, y = weightlbs_invsqrtscale)) + geom_point(color = "light blue") + labs(title = "Inverse sqrt Scaled Data")
# Arrange both plots side by side
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2, nrow = 4)
setwd("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation")
setwd("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation")
getwd()
vaccination <- read.csv("country_vaccinations.csv", stringsAsFactors = FALSE)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
head(vaccination)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
#transforming character to Date
vaccination$date <- as.Date(vaccination$date)
#min-max normalization
normalizeMinMax <- function (x) {
return ((x - min(x)) / (max(x) - min(x)))
}
#[,3:8] means that we are selecting from the 3th column to the 8th
vaccination_minmax <- as.data.frame(sapply(vaccination[,3:8], normalizeMinMax))
summary(vaccination_minmax)
ggplot(mydata, aes(x = total_vaccinations , y = daily_vaccinations)) + geom_point()
ggplot(mydata, aes(x = people_vaccinated , y = daily_vaccinations)) + geom_point()
ggplot(vaccination, aes(x = people_vaccinated , y = daily_vaccinations)) + geom_point()
source("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation/dataprep.R")

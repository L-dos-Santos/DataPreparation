install_github("kassambara/factoextra")
suppressWarnings(rep.hcpc)
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
suppressWarnings(rep.hcpc)
install_github("kassambara/factoextra")
install_github("kassambara/factorextra")
devtools::install_github("kassambara/factorextra")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("kassambara/factoextra")
library(factoextra)
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
install_github("kassambara/factoextra")
install_github("kassambara/factoextra", force = TRUE)
res <- PCA(iris.PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
suppressWarnings(rep.hcpc)
mtcars
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE, scale = TRUE)
summary(mtcars.pca)
install.packages("remotes")
library(remotes)
remotes::install_github("vqv/ggbiplot", force = TRUE)
path <- "file:///C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/Students.csv"
students <- read.csv(path, sep = ";", dec = ",", na.strings =
c(".", "NA", "?"),
strip.white = TRUE, encoding = "UTF-8",
row.names = 1)
students
PCA <- princomp(na.omit(students))
PCA
summary(PCA)
remotes::install_github("vqv/ggbiplot", force = TRUE)
unclass(PCA$loadings[,1:3])
PCA$scores[, 1:3]
summary(PCA$scores[, 1:3])
plot(PCA, main = "", col = "darkgreen")
title(main = "Principle Components Importance for Students")
components <- c(1, 2)
# plot using biplot function
biplot(PCA, main = "", choices = components)
title(main = "PCA for Students")
directory <- c("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/iris.csv")
iris <- read.table(directory, header = TRUE, sep = ",",
na.strings = "NA", dec = ".", strip.white = TRUE)
install.packages("FactoMineR")
library(FactoMineR)
install.packages("devtools")
library(devtools)
install_github("kassambara/factoextra")
install_github("kassambara/factoextra", force = TRUE)
library(factoextra)
iris.PCA <- iris[, c("X", "Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width")]
res <- PCA(iris.PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
res
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
suppressWarnings(rep.hcpc)
source("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation/dataprep.R")
getwd("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation")
getwd("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation")
setwd("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation")
vaccination <- read.csv("country_vaccinations.csv", stringsAsFactors = FALSE)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
#transforming character to Date
vaccination$date <- as.Date(vaccination$date)
daily_vac_norm<-normalizeMinMax(vaccination$daily_vaccinations)
#min-max normalization
normalizeMinMax <- function (x) {
return ((x - min(x)) / (max(x) - min(x)))
}
daily_vac_norm<-normalizeMinMax(vaccination$daily_vaccinations)
total_vac_norm<-normalizeMinMax(vaccination$total_vaccinations)
ggplot(vaccination, aes(x = daily_vac_norm,
y = total_vac_norm)) +
geom_point()
library(tidyverse)
library(ggplot2)
library(gridExtra)
#library(cowplot)
library(robustbase)
ggplot(vaccination, aes(x = daily_vac_norm,
y = total_vac_norm)) +
geom_point()
#min-max normalization
normalizeMinMax <- function (x) {
return ((x - min(x)) / (max(x) - min(x)))
}
daily_vac_norm<-normalizeMinMax(vaccination$daily_vaccinations)
#total_vac_norm<-normalizeMinMax(vaccination$total_vaccinations)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
# Creating a z score standardization data frame
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination, aes(x = daily_vac_norm)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
# Creating a z score standardization data frame
daily_vac_zscaled<-scale(vaccination$daily_vaccinations)
#vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
#summary(vaccination_z_score)
sapply(daily_vac_zscaled,sd)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
#transforming daily vaccination column to z score standardization
daily_vac_zscaled<-scale(vaccination$daily_vaccinations)
#vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
#summary(vaccination_z_score)
sapply(daily_vac_zscaled,sd)
daily_vac_zscaled<-scale(vaccination$daily_vaccinations)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
# Normalize the data using the Robust Scaler
daily_vac_robust <- (vaccination$daily_vaccinations - median(vaccination$daily_vaccinations)) / mad(vaccination$daily_vaccinations)
#min-max normalization
normalizeMinMax <- function (x) {
return ((x - min(x)) / (max(x) - min(x)))
}
daily_vac_norm<-normalizeMinMax(vaccination$daily_vaccinations)
#total_vac_norm<-normalizeMinMax(vaccination$total_vaccinations)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
# Normalize the data using the Robust Scaler
daily_vac_robust <- (vaccination$daily_vaccinations - median(vaccination$daily_vaccinations)) / mad(vaccination$daily_vaccinations)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination, aes(x = daily_vac_norm)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)")
p4 <- ggplot(vaccination, aes(x = daily_vac_robust)) +
geom_histogram(fill = "pink", color = "black") +
labs(title = "Histogram of Robust Scalar",
x = "Robust Scalar(Daily Vaccinations)")
grid.arrange(p1, p2, p3, p4, p5 nrow = 2, ncol = 2)
grid.arrange(p1, p2, p3, p4, p5, nrow = 2, ncol = 2)
#min-max normalization
normalizeMinMax <- function (x) {
return ((x - min(x)) / (max(x) - min(x)))
}
daily_vac_norm<-normalizeMinMax(vaccination$daily_vaccinations)
#total_vac_norm<-normalizeMinMax(vaccination$total_vaccinations)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
# Normalize the data using the Robust Scaler
daily_vac_robust <- (vaccination$daily_vaccinations - median(vaccination$daily_vaccinations)) / mad(vaccination$daily_vaccinations)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination, aes(x = daily_vac_norm)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)")
p5 <- ggplot(vaccination, aes(x = daily_vac_robust)) +
geom_histogram(fill = "pink", color = "black") +
labs(title = "Histogram of Robust Scalar",
x = "Robust Scalar(Daily Vaccinations)")
grid.arrange(p1, p2, p3, p4, p5, nrow = 2, ncol = 2)
grid.arrange(p1, p2, p3, p4, p5, nrow = 3, ncol = 3)
# Define the robust_scalar function
#robust_scalar <- function(x) {
#  median(x) / IQR(x)
#}
# Apply the function to relevant variables
vaccination_robust <- range_data %>%
select(daily_vaccinations, total_vaccinations, people_vaccinated, people_fully_vaccinated) %>%
summarise_all(robust_scalar)
#filtering the countries where the avarage of total vaccinations and people vaccinated
#are <5000
filtered_country <- filter(by_country,
avg_total_vaccinations <5000 & avg_people_vaccinated < 5000)
encoded_data <- model.matrix(
~ country - 1,
data = vaccination
)
final_data <- cbind(vaccination, encoded_data)
print(final_data)
View(final_data)
#reading the dataset
vaccination <- read.csv("country_vaccinations.csv", stringsAsFactors = FALSE)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'source_name',
'source_website')] <- list(NULL)
head(vaccination)
encoded_data <- model.matrix(
~ vaccine - 1,
data = vaccination
)
View(vaccination)
#reading the dataset
vaccination <- read.csv("country_vaccinations.csv", stringsAsFactors = FALSE)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'source_name',
'source_website')] <- list(NULL)
head(vaccination)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
#transforming character to Date
vaccination$date <- as.Date(vaccination$date)
#min-max normalization
normalizeMinMax <- function (x) {
return ((x - min(x)) / (max(x) - min(x)))
}
daily_vac_norm<-normalizeMinMax(vaccination$daily_vaccinations)
#total_vac_norm<-normalizeMinMax(vaccination$total_vaccinations)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
# Normalize the data using the Robust Scalar
daily_vac_robust <-
(vaccination$daily_vaccinations - median(
vaccination$daily_vaccinations)) / mad(
vaccination$daily_vaccinations)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination, aes(x = daily_vac_norm)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)")
p5 <- ggplot(vaccination, aes(x = daily_vac_robust)) +
geom_histogram(fill = "pink", color = "black") +
labs(title = "Histogram of Robust Scalar",
x = "Robust Scalar(Daily Vaccinations)")
grid.arrange(p1, p2, p3, p4, p5, nrow = 3, ncol = 3)
#creating avg variables for total of vaccines
#and avg for people vaccinated per country
by_country <- vaccination %>% group_by(country) %>% summarise(
avg_total_vaccinations = mean(total_vaccinations),
avg_people_vaccinated = mean(people_vaccinated)
)
by_country
#filtering the countries where the avarage of total vaccinations and people vaccinated
#are <5000
filtered_country <- filter(by_country,
avg_total_vaccinations <5000 & avg_people_vaccinated < 5000)
print(filtered_country)
#box plot to identify outliers
boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
main = "Box Plot with Outliers",
names = c("Avarage of Total Vaccinations",
"Avarage of People Vaccinated"))
#plot with top 5 countries
ggplot(top_countries, aes(x = reorder(country, -total_vaccinations), y = total_vaccinations)) +
geom_bar(stat = "identity", fill = "orange", color = "black") +
labs(title = "Top 5 Countries with Highest Total Vaccinations",
x = "Country",
y = "Total Vaccinations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
#selecting the top 5 countries
top_countries <- vaccination %>%
arrange(desc(total_vaccinations)) %>%
distinct(country, .keep_all = TRUE) %>%
head(5)
# Print the result
print(top_countries)
#plot with top 5 countries
ggplot(top_countries, aes(x = reorder(country, -total_vaccinations), y = total_vaccinations)) +
geom_bar(stat = "identity", fill = "orange", color = "black") +
labs(title = "Top 5 Countries with Highest Total Vaccinations",
x = "Country",
y = "Total Vaccinations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
encoded_data <- model.matrix(
~ vaccines - 1,
data = vaccination
)
final_data <- cbind(vaccination, encoded_data)
print(final_data)
View(final_data)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
head(vaccination)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
#transforming character to Date
vaccination$date <- as.Date(vaccination$date)
encoded_data <- model.matrix(
~ country - 1,
data = vaccination
)
final_data <- cbind(vaccination, encoded_data)
print(final_data)
View(final_data)
print(final_data [, 1:10])
print(final_data [, 1:15])
PCA <- princomp(vaccination,
scale = TRUE,
center = TRUE,
tol = 0)
PCA <- princomp(!is.finite(vaccination),
scale = TRUE,
center = TRUE,
tol = 0)
finite_rows <-
complete.cases(vaccination)
PCA <- princomp(vaccination[finite_rows, ],
scale = TRUE,
center = TRUE,
tol = 0)
vaccination_pca <- prcomp(vaccination[,c(3:8)],
center = TRUE,
scale. = TRUE)
summary(vaccination_pca)
install.packages("robustbase")
install.packages("robustbase")
library(devtools)
library(ggbiplot)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("vqv/ggbiplot")
top_countries
vaccination(10)
vaccination
top_countries <- vaccination %>%
arrange(desc(total_vaccinations)) %>%
distinct(country, .keep_all = TRUE) %>%
head(5)
# Print the result
print(top_countries)
#applying PCA
top_countries_pca <- prcomp(top_countries[,c(3:8)],
center = TRUE,
scale. = TRUE)
summary(top_countries_pca)
#loadings for first 3 components
unclass(top_countries_pca$loadins[,1:3])
#loadings for first 3 components
unclass(top_countries_pca$loadings[,1:3])
#applying PCA
top_countries_pca <- prcomp(top_countries[,c(3:8)],
center = TRUE,
scale. = TRUE,
tol = 0)
top_countries_pca
#loadings for first 3 components
unclass(top_countries_pca$loadings[,1:3])
#selecting the top 5 countries
top_countries <- vaccination %>%
arrange(desc(total_vaccinations)) %>%
distinct(country, .keep_all = TRUE) %>%
head(5)
# Print the result
print(top_countries)
top_countries_pca <- prcomp(top_countries[, (3:8)],
center = TRUE,
scale. = TRUE,
tol = 0)
loadings_ft <- top_countries_pca$rotation[, 1:3]
print(loadings_ft)
#loadings for first 3 components
unclass(top_countries_pca$rotation[,1:3])
top_countries_pca$x[, 1:3]
#applying PCA
top_countries_pca <- prcomp(top_countries[, (3:8)],
center = TRUE,
scale. = TRUE,
tol = 0)
summary(top_countries_pca)
plot(top_countries_pca,
main = "",
col = "darkblue")
#applying PCA
top_countries_pca <- prcomp(top_countries[, c(3:8)],
center = TRUE,
scale. = TRUE,
tol = 0)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(top_countries_pca,
main = "",
col = "darkblue")
pca_data <- as.data.frame(top_countries_pca$rotation)
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point(color = "darkblue") +
labs(title = "PCA Plot")
dev.new()
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point(color = "darkblue") +
labs(title = "PCA Plot")
dev.off()
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point(color = "darkblue") +
labs(title = "PCA Plot")
pca_data
plot(pca_data,
main = "",
col = "darkblue")
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point(color = "darkblue") +
labs(title = "PCA Plot")
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point(shape = 16, color = "darkblue", size = 3) +  # shape 16 represents a solid circle
labs(title = "Scatter Plot of PCA Components")
top_countries_pca <- prcomp(top_countries[, c(3:8)],
center = TRUE,
scale. = TRUE,
tol = 0)
summary(top_countries_pca)
plot(top_countries_pca, main="",col="darkgreen")
par(mar = c(5, 4, 4, 2) + 0.1)
plot(top_countries_pca, main="",col="darkgreen")
png("your_plot.png", width = 10, height = 8)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(top_countries_pca, main="",col="darkgreen")
pca_data <- as.data.frame(top_countries_pca$x)
ggplot(pca_data, aes(x = PC1, y = PC2)) +
geom_point(color = "darkblue") +
labs(title = "PCA Plot")

p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red", color = "black", bins = 30) +
labs(title = "Boxplot of Sepal Length (Standardized)")
p4 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "skyblue", color = "black", bins = 30) +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
#histogram after normalisation
hist(vaccination$daily_vaccinations)
hist(vaccination$daily_vaccinations,
xlim = c(0,10),
col = "blue",
ylab = "Count",
xlab = "Daily Vaccinations",
main = "Histogram of Daily Vaccinations")
hist(vaccination$daily_vaccinations,
#xlim = c(0,10),
col = "blue",
ylab = "Count",
xlab = "Daily Vaccinations",
main = "Histogram of Daily Vaccinations")
#min-max normalization
normalizeMinMax <- function (x) {
res <- (x - min(x)) / (max(x) - min(x))
return(res)
}
#creating a data frame with the numeric values
#[,3:8] means that we are selecting from the 3th column to the 8th
vaccination_minmax <- as.data.frame(sapply(vaccination[,3:8], normalizeMinMax))
summary(vaccination_minmax)
hist(vaccination_minmax,
col = "red",
ylab = "Count",
xlab = "Daily Vaccinations",
main = "Histogram of Daily Vaccinations")
hist(vaccination_minmax,
col = "red",
ylab = "Count",
xlab = "Daily Vaccinations",
main = "Histogram of Daily Vaccinations")
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
labs(title = "Boxplot of Sepal Length (Original Data)")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "lightgreen", color = "black", bins = 30) +
labs(title = "Boxplot of Sepal Length (Min-Max Scaled)")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red", color = "black", bins = 30) +
labs(title = "Boxplot of Sepal Length (Standardized)")
p4 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "skyblue", color = "black", bins = 30) +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
ggplot(vaccination) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
#analizing the daily vaccinations
ggplot(vaccination) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue",
ylab = "Count",
xlab = "Daily Vaccinations")+
theme_minimal()
#analizing the daily vaccinations
ggplot(vaccination) +
aes(x=daily_vaccinations,
ylab = "Count",
xlab = "Daily Vaccinations")+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
#analizing the daily vaccinations
ggplot(vaccination) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
boxplot(vaccination,
ylab = "daily_vaccinations")
boxplot(vaccination$daily_vaccinations,
ylab = "daily_vaccinations")
#analizing the daily vaccinations
ggplot(vaccination) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
boxplot(vaccination$total_vaccinations,
ylab = "daily_vaccinations")
boxplot(vaccination$people_vaccinated,
ylab = "daily_vaccinations")
boxplot(vaccination$people_fully_vaccinated,
ylab = "daily_vaccinations")
boxplot.stats(vaccination$daily_vaccinations)$out
I = [q0.25-1.5IQR;q0.75+1.5IQR]
boxplot.stats
boxplot.stats(vaccination$daily_vaccinations)$out
boxplot.stats(vaccination$total_vaccinations)$out
boxplot.stats(vaccination$people_vaccinated)$out
boxplot.stats(vaccination$people_fully_vaccinated_per_hundred)$out
boxplot.stats(vaccination$daily_vaccinations_per_million)$out
#creating avg variables for total of vaccines
#and avg for people vaccinated per country
by_country <- vaccination %>% group_by(country) %>% summarise(
count = n(),
avg_total_vaccinations = mean(total_vaccinations),
avg_people_vaccinated = mean(people_vaccinated)
)
by_country
#filter to find Argentina
argentina <- filter(vaccination, country == "Argentina")
print(argentina)
#plot with top 5 countries
ggplot(top_countries, aes(x = reorder(country, -total_vaccinations), y = total_vaccinations)) +
geom_bar(stat = "identity", fill = "orange", color = "black") +
labs(title = "Top 5 Countries with Highest Total Vaccinations",
x = "Country",
y = "Total Vaccinations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
top_countries <- vaccination %>%
arrange(desc(total_vaccinations)) %>%
distinct(country, .keep_all = TRUE) %>%
head(5)
# Print the result
print(top_countries)
#plot with top 5 countries
ggplot(top_countries, aes(x = reorder(country, -total_vaccinations), y = total_vaccinations)) +
geom_bar(stat = "identity", fill = "orange", color = "black") +
labs(title = "Top 5 Countries with Highest Total Vaccinations",
x = "Country",
y = "Total Vaccinations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
#plot
ggplot(data = by_country, mapping = aes(x = avg_total_vaccinations,
y = avg_people_vaccinated))+
geom_point(aes(size = count),
alpha = 1/3) +
geom_smooth(se = FALSE)
hist(vaccination$total_vaccinations)
hist(vaccination$total_vaccinations)
plot(vaccination$total_vaccinations,
breaks = 30,
xlim = c(0, 5000),
col = "purple",
border = "black",
ylim = c(0, 400),
xlab = "Total of Vaccinations",
ylab = "Counts",
main = "Vaccination in Argentina")
box(which = "plot",
lty = "solid",
col = "black")
boxplot.stats(argentina$daily_vaccinations)$out
#filter to find Argentina
argentina <- filter(vaccination, country == "Argentina")
boxplot.stats(argentina$daily_vaccinations)$out
boxplot(argetina)
argentina <- filter(vaccination, country == "Argentina")
boxplot(argetina)
boxplot(vaccination)
boxplot(vaccination$country)
boxplot(vaccination$date)
boxplot(vaccination$total_vaccinations)
boxplot(vaccination$daily_vaccinations_per_million)
boxplot(vaccination$people_fully_vaccinated_per_hundred)
boxplot(vaccination_minmax)
boxplot(vaccination_z_score)
#creating avg variables for total of vaccines
#and avg for people vaccinated per country
by_country <- vaccination %>% group_by(country) %>% summarise(
count = n(),
avg_total_vaccinations = mean(total_vaccinations),
avg_people_vaccinated = mean(people_vaccinated)
)
by_country
boxplot(by_country)
#*----- CALCULATING MEAN ------*
mean(vaccination$total_vaccinations)
summary(vaccination$total_vaccinations)
mean(vaccination$people_vaccinated)
mean(vaccination$total_vaccinations)
mean(vaccination$people_fully_vaccinated)
mean(vaccination$daily_vaccinations)
mean(vaccination$total_vaccinations_per_hundred)
mean(vaccination$people_vaccinated_per_hundred)
mean(vaccination$people_fully_vaccinated_per_hundred)
mean(vaccination$daily_vaccinations_per_million)
library(tidyverse)
library(ggplot2)
library(gridExtra)
#reading the dataset
vaccination <- read.csv("country_vaccinations.csv", stringsAsFactors = FALSE)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
head(vaccination)
vaccination[is.na(vaccination)] <- 0
vaccination$date <- as.Date(vaccination$date)
#analizing the daily vaccinations
ggplot(vaccination) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
#min-max normalization
normalizeMinMax <- function (x) {
res <- (x - min(x)) / (max(x) - min(x))
return(res)
}
#[,3:8] means that we are selecting from the 3th column to the 8th
vaccination_minmax <- as.data.frame(sapply(vaccination[,3:8], normalizeMinMax))
summary(vaccination_minmax)
hist(vaccination_minmax,
col = "red",
ylab = "Count",
xlab = "Daily Vaccinations",
main = "Histogram of Daily Vaccinations")
hist(vaccination_minmax,
col = "red",
ylab = "Count",
xlab = "daily_vaccinations",
main = "Histogram of Daily Vaccinations")
ggplot(normalizeMinMax()) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
ggplot(normalizeMinMax) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination, aes(x = vaccination_z_score, aes(daily_vaccinations))) +
geom_histogram(fill = "red", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination, aes(x = vaccination_z_score(daily_vaccinations))) +
geom_histogram(fill = "red", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
install.packages("cowplot")
library(cowplot)
# Original histogram
original_plot <- ggplot(vaccination) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "blue") +
theme_minimal() +
ggtitle("Original Daily Vaccinations")
# Min-Max Normalized histogram
minmax_plot <- ggplot(vaccination_minmax) +
aes(x = value) +
geom_histogram(bins = 30, fill = "green") +
theme_minimal() +
ggtitle("Min-Max Normalized Daily Vaccinations")
# Z-score Standardized histogram
zscore_plot <- ggplot(vaccination_z_score) +
aes(x = value) +
geom_histogram(bins = 30, fill = "red") +
theme_minimal() +
ggtitle("Z-Score Standardized Daily Vaccinations")
# Log-transformed histogram
log_plot <- ggplot() +
aes(x = vaccination_log) +
geom_histogram(bins = 30, fill = "purple") +
theme_minimal() +
ggtitle("Log-Transformed Daily Vaccinations")
# Combine all plots using facet_wrap
combined_plot <- plot_grid(
original_plot,
minmax_plot,
zscore_plot,
log_plot,
ncol = 2, labels = "AUTO"
)
# Original histogram
original_plot <- ggplot(vaccination) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "blue") +
theme_minimal() +
ggtitle("Original Daily Vaccinations")
# Min-Max Normalized histogram
minmax_plot <- ggplot(vaccination_minmax) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "green") +
theme_minimal() +
ggtitle("Min-Max Normalized Daily Vaccinations")
# Original histogram
original_plot <- ggplot(vaccination) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "blue") +
theme_minimal() +
ggtitle("Original Daily Vaccinations")
# Min-Max Normalized histogram
minmax_plot <- ggplot(vaccination_minmax) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "green") +
theme_minimal() +
ggtitle("Min-Max Normalized Daily Vaccinations")
# Z-score Standardized histogram
zscore_plot <- ggplot(vaccination_z_score) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "red") +
theme_minimal() +
ggtitle("Z-Score Standardized Daily Vaccinations")
# Log-transformed histogram
log_plot <- ggplot() +
aes(x = vaccination_log) +
geom_histogram(bins = 30, fill = "purple") +
theme_minimal() +
ggtitle("Log-Transformed Daily Vaccinations")
# Combine all plots using facet_wrap
combined_plot <- plot_grid(
original_plot,
minmax_plot,
zscore_plot,
log_plot,
ncol = 2, labels = "AUTO"
)
# Print the combined plot
print(combined_plot)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination, aes(x = vaccination_z_score(daily_vaccinations))) +
geom_histogram(fill = "red", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
# Creating a z score standardization data frame
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination, aes(x = vaccination_z_score(daily_vaccinations))) +
geom_histogram(fill = "red", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
# Original histogram
original_plot <- ggplot(vaccination) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "blue") +
theme_minimal() +
ggtitle("Original Daily Vaccinations")
# Min-Max Normalized histogram
minmax_plot <- ggplot(vaccination_minmax) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "green") +
theme_minimal() +
ggtitle("Min-Max Normalized Daily Vaccinations")
# Z-score Standardized histogram
zscore_plot <- ggplot(vaccination_z_score) +
aes(x = daily_vaccinations) +
geom_histogram(bins = 30, fill = "red") +
theme_minimal() +
ggtitle("Z-Score Standardized Daily Vaccinations")
# Log-transformed histogram
log_plot <- ggplot() +
aes(x = vaccination_log) +
geom_histogram(bins = 30, fill = "purple") +
theme_minimal() +
ggtitle("Log-Transformed Daily Vaccinations")
# Combine all plots using facet_wrap
combined_plot <- plot_grid(
original_plot,
minmax_plot,
zscore_plot,
log_plot,
ncol = 2, labels = "AUTO"
)
# Print the combined plot
print(combined_plot)
library(tidyverse)
library(ggplot2)
library(gridExtra)
vaccination <- read.csv("country_vaccinations.csv", stringsAsFactors = FALSE)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
head(vaccination)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
#transforming character to Date
vaccination$date <- as.Date(vaccination$date)
#analizing the daily vaccinations
ggplot(vaccination) +
aes(x=daily_vaccinations)+
geom_histogram(bins = 30L,
fill = "blue")+
theme_minimal()
#min-max normalization
normalizeMinMax <- function (x) {
res <- (x - min(x)) / (max(x) - min(x))
return(res)
}
#creating a data frame with the numeric values
#[,3:8] means that we are selecting from the 3th column to the 8th
vaccination_minmax <- as.data.frame(sapply(vaccination[,3:8], normalizeMinMax))
summary(vaccination_minmax)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
# Creating a z score standardization data frame
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination_minmax, aes(x = daily_vaccinations)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination, aes(x = vaccination_z_score(daily_vaccinations))) +
geom_histogram(fill = "red", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "skyblue", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)",
y = "Frequency")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
rlang::last_trace()

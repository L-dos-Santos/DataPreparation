install.packages("mosaic")
library(mosaic)
qplot(year,girls, data=present, geom="line", ylab="Number of girls baptized", xlab="Year")
qplot(year, girls, data=present)
dim(present)
dim(present)
dim(present)
dim(present)
dim(present)
dim(present.dat)
present = read.table("present.dat", header=TRUE)
present
qplot(year, girls, data=present)
present$boys/present$girls
qplot(year,boys/girls,data=present,geom="line",ylab="Boys/GirlsRatio")
arbuthnot = read.table("arbuthnot", header=TRUE)
arbuthnot = read.table("arbuthnot", header=TRUE)
arbuthnot = read.table("arbuthnot.dat", header=TRUE)
arbuthnot
qplot(year,boys/girls,data=present,geom="line",ylab="Boys/GirlsRatio")
qplot(year,boys/girls,data=present,geom="line",ylab="Boys/Girls Ration US")
qplot(year,boys/girls,data=arbuthnot,geom="line",ylab="Boys/Girls Ratio Arbuthnot")
qplot(year,boys/girls,data=present,geom="line",ylab="Boys/Girls Ration US")
birthsbyyear <- aggregate(present$births, by=list(year=present$year), FUN=sum)
present$year
present$boyTogirlratio <- present$boys / present$girls
present$boyTogirlratio
subset(present, select=c(year, boyTogirlratio))
plot(x=present$year, y=present$boyTogirlratio, xlab = "Year", ylab = "Boy->Girl Ratio", type ="1")
plot(x=present$year, y=present$boyTogirlratio, xlab = "Year", ylab = "Boy->Girl Ratio")
qplot(x=present$year, y=present$boyTogirlratio), data=present, geom="line" xlab = "Year", ylab = "Boy->Girl Ratio")
qplot(x=present$year, y=present$boyTogirlratio), data=present, geom="line" xlab = "Year", ylab = "Boy->Girl Ratio"
qplot(x=present$year, y=present$boyTogirlratio, data=present, geom="line", xlab = "Year", ylab = "Boy->Girl Ratio")
qplot(x=year, y=boyTogirlratio, data=present, geom="line", xlab = "Year", ylab = "Boy->Girl Ratio")
present&totalbirth <- present$boys + present$girls
present$totalbirth <- present$boys + present$girls
present[present$totalbirth == max(present$totalbirth),]
# Load the required libraries
library(ggplot2)
library(robustbase)
library(gridExtra)
# Read the file
iris <- read.csv(file = "iris-dataset.csv",
stringsAsFactors = FALSE)
getwd()
setwd("C:/Users/lsant/OneDrive/Documentos/Data Preparation)
# Load the required libraries
library(ggplot2)
library(robustbase)
library(gridExtra)
# Read the file
iris <- read.csv(file = "iris-dataset.csv",
# Load the required libraries
library(ggplot2)
library(robustbase)
library(gridExtra)
# Read the file
iris <- read.csv(file = "iris-dataset.csv",
stringsAsFactors = FALSE)
getwd()
setwd("C:/Users/lsant/OneDrive/Documentos/Data Preparation)
getwd()
getwd()
library(tidyverse)
library(lubridate)
today()
now()
#String/individual date/existing date
ymd("2023-11-07")
mtcars
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE, scale = TRUE)
summary(mtcars.pca)
install.packages("remotes")
library(remotes)
remotes::install_github("vqv/ggbiplot", force = TRUE)
path <- "file:///C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/Students.csv"
students <- read.csv(path, sep = ";", dec = ",", na.strings =
c(".", "NA", "?"),
strip.white = TRUE, encoding = "UTF-8",
row.names = 1)
students
PCA <- princomp(na.omit(students))
PCA
Summary(PCA)
summary(PCA)
unclass(PCA$loadings[,1:3])
PCA$scores[, 1:3]
summary(PCA$scores[, 1:3])
plot(PCA, main = "", col = "darkgreen")
title(main = "Principle Components Importance for Students")
# plot using biplot function
biplot(PCA, main = "", choices = components)
biplot(PCA, main = "", choices = components)
components <- c(1, 2)
biplot(PCA, main = "", choices = components)
title(main = "PCA for Students")
directory <- c("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/iris.csv")
iris <- read.table(directory, header = TRUE, sep = ",",
na.strings = "NA", dec = ".", strip.white = "TRUE")
iris <- read.table(directory, header = TRUE, sep = ",",
na.strings = "NA", dec = ".", strip.white = TRUE)
install.packages("FactoMinoR")
library(FactoMinoR)
install.packages("FactoMineR")
library(FactoMineR)
iris.PCA <- iris[, c("X", "Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width")]
iris.PCA <- iris[, c("X", "Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width")]
res <- PCA(iris, PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
iris.PCA <- iris[, c("X", "Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width")]
res <- PCA(iris, PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
res <- PCA(iris.PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
res
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
library(FactoMineR)
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
install.packages("FactoMineR")
mtcars
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE, scale = TRUE)
summary(mtcars.pca)
install.packages("remotes")
library(remotes)
remotes::install_github("vqv/ggbiplot", force = TRUE)
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
mtcars
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE, scale = TRUE)
summary(mtcars.pca)
install.packages("remotes")
library(remotes)
remotes::install_github("vqv/ggbiplot", force = TRUE)
path <- "file:///C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/Students.csv"
students <- read.csv(path, sep = ";", dec = ",", na.strings =
c(".", "NA", "?"),
strip.white = TRUE, encoding = "UTF-8",
row.names = 1)
students
PCA <- princomp(na.omit(students))
PCA
summary(PCA)
unclass(PCA$loadings[,1:3])
PCA$scores[, 1:3]
summary(PCA$scores[, 1:3])
plot(PCA, main = "", col = "darkgreen")
title(main = "Principle Components Importance for Students")
components <- c(1, 2)
# plot using biplot function
biplot(PCA, main = "", choices = components)
title(main = "PCA for Students")
directory <- c("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/iris.csv")
iris <- read.table(directory, header = TRUE, sep = ",",
na.strings = "NA", dec = ".", strip.white = TRUE)
install.packages("FactoMineR")
library(FactoMineR)
iris.PCA <- iris[, c("X", "Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width")]
res <- PCA(iris.PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
res
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
table(res.HCPC$data.clust[, ncol(res.HCPC$data.clust), drop = F])
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
install.packages("FactoMineR")
library(FactoMineR)
iris.PCA <- iris[, c("X", "Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width")]
res <- PCA(iris.PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
res
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
suppressWarnings(res.hcpc)
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
install_github("kassambar/factorextra")
install_github("kassambara/factoextra")
suppressWarnings(rep.hcpc)
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
suppressWarnings(rep.hcpc)
install_github("kassambara/factoextra")
install_github("kassambara/factorextra")
devtools::install_github("kassambara/factorextra")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("kassambara/factoextra")
library(factoextra)
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
install_github("kassambara/factoextra")
install_github("kassambara/factoextra", force = TRUE)
res <- PCA(iris.PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
suppressWarnings(rep.hcpc)
mtcars
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE, scale = TRUE)
summary(mtcars.pca)
install.packages("remotes")
library(remotes)
remotes::install_github("vqv/ggbiplot", force = TRUE)
path <- "file:///C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/Students.csv"
students <- read.csv(path, sep = ";", dec = ",", na.strings =
c(".", "NA", "?"),
strip.white = TRUE, encoding = "UTF-8",
row.names = 1)
students
PCA <- princomp(na.omit(students))
PCA
summary(PCA)
remotes::install_github("vqv/ggbiplot", force = TRUE)
unclass(PCA$loadings[,1:3])
PCA$scores[, 1:3]
summary(PCA$scores[, 1:3])
plot(PCA, main = "", col = "darkgreen")
title(main = "Principle Components Importance for Students")
components <- c(1, 2)
# plot using biplot function
biplot(PCA, main = "", choices = components)
title(main = "PCA for Students")
directory <- c("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/Data Sets-20231114/iris.csv")
iris <- read.table(directory, header = TRUE, sep = ",",
na.strings = "NA", dec = ".", strip.white = TRUE)
install.packages("FactoMineR")
library(FactoMineR)
install.packages("devtools")
library(devtools)
install_github("kassambara/factoextra")
install_github("kassambara/factoextra", force = TRUE)
library(factoextra)
iris.PCA <- iris[, c("X", "Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width")]
res <- PCA(iris.PCA, scale.unit = TRUE, ncp = 5, graph = FALSE)
res
table(res.hcpc$data.clust[, ncol(res.hcpc$data.clust), drop = F])
suppressWarnings(rep.hcpc)
source("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation/dataprep.R")
setwd("C:/Users/lsant/Documents/College/Year-4.1/Data Exploration & Preparation/CA1/DataPreparation")
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(devtools)
library(robustbase)
library(ggbiplot)
remotes::install_github("vqv/ggbiplot")
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(devtools)
library(robustbase)
library(ggbiplot)
remotes::install_github("vqv/ggbiplot")
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(devtools)
library(robustbase)
library(ggbiplot)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
getwd()
#reading the dataset
vaccination <- read.csv("country_vaccinations.csv", stringsAsFactors = FALSE)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
#deleting columns
vaccination[, c('iso_code',
'daily_vaccinations_raw',
'vaccines',
'source_name',
'source_website')] <- list(NULL)
#replacing the missing values for 0
vaccination[is.na(vaccination)] <- 0
#transforming character to Date
vaccination$date <- as.Date(vaccination$date)
#dummy encoding to country variable
encoded_data <- model.matrix(
~ country - 1,
data = vaccination
)
final_data <- cbind(vaccination, encoded_data)
print(final_data [, 1:15])
#min-max normalization
normalizeMinMax <- function (x) {
return ((x - min(x)) / (max(x) - min(x)))
}
daily_vac_norm<-normalizeMinMax(vaccination$daily_vaccinations)
# Standardize the numeric columns
z_score <- function(x) {
res <- (x - mean(x)) / sd(x)
return(res)
}
vaccination_z_score <- as.data.frame(sapply(vaccination[,3:8], z_score))
summary(vaccination_z_score)
sapply(vaccination_z_score,sd)
#using log10 transformation to normalize
#the distribution
vaccination_log <- log10(
vaccination$daily_vaccinations + 1e-10)
summary(vaccination_log)
# Normalize the data using the Robust Scalar
daily_vac_robust <-
(vaccination$daily_vaccinations - median(
vaccination$daily_vaccinations)) / mad(
vaccination$daily_vaccinations)
p1 <- ggplot(vaccination, aes(x = daily_vaccinations)) +
geom_histogram(fill = "blue2", color = "black") +
labs(title = "Histogram of Original Daily Vaccinations")
p2 <- ggplot(vaccination, aes(x = daily_vac_norm)) +
geom_histogram(fill = "green2", color = "black") +
labs(title = "Histogram of Min-Max Scaled Daily Vaccinations")
p3 <- ggplot(vaccination_z_score, aes(x = daily_vaccinations)) +
geom_histogram(fill = "red2", color = "black") +
labs(title = "Histogram of Standardized Daily Vaccinations")
p4 <- ggplot(vaccination, aes(x = log10(daily_vaccinations + 1e-10))) +
geom_histogram(fill = "yellow2", color = "black") +
labs(title = "Histogram of Log-Transformed Daily Vaccinations",
x = "Log(Daily Vaccinations)")
p5 <- ggplot(vaccination, aes(x = daily_vac_robust)) +
geom_histogram(fill = "pink", color = "black") +
labs(title = "Histogram of Robust Scalar",
x = "Robust Scalar(Daily Vaccinations)")
grid.arrange(p1, p2, p3, p4, p5, nrow = 3, ncol = 3)
#creating avg variables for total of vaccines
#and avg for people vaccinated per country
by_country <- vaccination %>% group_by(country) %>% summarise(
avg_total_vaccinations = mean(total_vaccinations),
avg_people_vaccinated = mean(people_vaccinated)
)
by_country
#filtering the countries where the avarage of total vaccinations and people vaccinated
#are <5000
filtered_country <- filter(by_country,
avg_total_vaccinations <5000 & avg_people_vaccinated < 5000)
print(filtered_country)
#box plot to identify outliers
boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
main = "Box Plot with Outliers",
names = c("Avarage of Total Vaccinations",
"Avarage of People Vaccinated"))
# Assuming you have a data frame named 'filtered_country' with columns 'avg_total_vaccinations' and 'avg_people_vaccinated'
boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
main = "Box Plot with Outliers",
names = c("Average of Total Vaccinations",
"Average of People Vaccinated"),
col = c("lightblue", "lightgreen"),  # Customize box colors
border = c("blue", "green"),        # Customize border colors
notch = TRUE,                        # Add notches for comparing medians
varwidth = TRUE,                     # Adjust box widths based on sample sizes
ylim = c(0, max(filtered_country$avg_people_vaccinated) * 1.1),  # Adjust y-axis limits
pch = 19,                            # Set symbol for outliers
cex = 1.5                            # Adjust size of plot elements
)
# Label outliers
outliers <- boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
plot = FALSE)$out
text(x = rep(1:2, sapply(outliers, length)),
y = unlist(outliers),
labels = round(unlist(outliers), 2),
pos = 2,
col = "red", cex = 1)
by_country <- vaccination %>% group_by(country) %>% summarise(
avg_total_vaccinations = mean(total_vaccinations),
avg_people_vaccinated = mean(people_vaccinated)
)
by_country
boxplot(vaccination)
boxplot(vaccination)
boxplot(vaccination$total_vaccinations)
boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
main = "Box Plot with Outliers",
names = c("Average of Total Vaccinations",
"Average of People Vaccinated"),
col = c("lightblue", "lightgreen"),
border = c("blue", "green"),
notch = TRUE,                        # Add notches for comparing medians
varwidth = TRUE,
ylim = c(0, max(filtered_country$avg_people_vaccinated) * 1.1),
pch = 19,
cex = 1.5
)
# Label outliers
outliers <- boxplot(filtered_country$avg_total_vaccinations,
filtered_country$avg_people_vaccinated,
plot = FALSE)$out
text(x = rep(1:2, sapply(outliers, length)),
y = unlist(outliers),
labels = round(unlist(outliers), 2),
pos = 2,
col = "red", cex = 1)
